{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    // 自定义密码验证规则\n    const validatePassword = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请确认密码')); // 确认密码不能为空\n      } else if (value !== this.user.newPassword) {\n        callback(new Error('确认密码错误')); // 确认密码需与新密码一致\n      } else {\n        callback(); // 验证通过\n      }\n    };\n    return {\n      // 当前用户信息，从 localStorage 加载\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      // 控制修改密码弹窗的显示\n      dialogVisible: false,\n      // 表单验证规则\n      rules: {\n        password: [{\n          required: true,\n          message: '请输入原始密码',\n          trigger: 'blur'\n        }],\n        newPassword: [{\n          required: true,\n          message: '请输入新密码',\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          validator: validatePassword,\n          required: true,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    // 保存用户信息\n    update() {\n      this.$request.put('/admin/update', this.user).then(res => {\n        if (res.code === '200') {\n          this.$message.success('保存成功'); // 提示保存成功\n          localStorage.setItem('xm-user', JSON.stringify(this.user)); // 更新缓存\n          this.$emit('update:user'); // 通知父组件刷新用户信息\n        } else {\n          this.$message.error(res.msg); // 显示错误信息\n        }\n      });\n    },\n    // 上传头像成功后更新用户头像\n    handleAvatarSuccess(response, file, fileList) {\n      this.$set(this.user, 'avatar', response.data); // 更新头像地址\n    },\n    // 打开修改密码弹窗\n    updatePassword() {\n      this.dialogVisible = true;\n    },\n    // 提交修改密码表单\n    save() {\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request.put('/updatePassword', this.user).then(res => {\n            if (res.code === '200') {\n              this.$message.success('修改密码成功'); // 提示修改成功\n              this.$router.push('/login'); // 重定向到登录页面\n            } else {\n              this.$message.error(res.msg); // 显示错误信息\n            }\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","validatePassword","rule","value","callback","Error","user","newPassword","JSON","parse","localStorage","getItem","dialogVisible","rules","password","required","message","trigger","confirmPassword","validator","methods","update","$request","put","then","res","code","$message","success","setItem","stringify","$emit","error","msg","handleAvatarSuccess","response","file","fileList","$set","updatePassword","save","$refs","formRef","validate","valid","$router","push"],"sources":["src/views/front/Person.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-content\">\r\n    <!-- 用户信息卡片 -->\r\n    <el-card style=\"width: 50%; margin: 30px auto\">\r\n      <!-- 修改密码按钮 -->\r\n      <div style=\"text-align: right; margin-bottom: 20px\">\r\n        <el-button type=\"primary\" @click=\"updatePassword\">修改密码</el-button>\r\n      </div>\r\n\r\n      <!-- 用户信息表单 -->\r\n      <el-form :model=\"user\" label-width=\"80px\" style=\"padding-right: 20px\">\r\n        <!-- 上传头像 -->\r\n        <div style=\"margin: 15px; text-align: center\">\r\n          <el-upload\r\n              class=\"avatar-uploader\"\r\n              :action=\"$baseUrl + '/files/upload'\"\r\n              :show-file-list=\"false\"\r\n              :on-success=\"handleAvatarSuccess\"\r\n          >\r\n            <!-- 显示用户头像 -->\r\n            <img v-if=\"user.avatar\" :src=\"user.avatar\" class=\"avatar\" />\r\n            <!-- 如果没有头像，则显示上传图标 -->\r\n            <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n          </el-upload>\r\n\r\n        </div>\r\n\r\n        <!-- 用户名 (不可编辑) -->\r\n        <el-form-item label=\"用户名\" prop=\"username\">\r\n          <el-input v-model=\"user.username\" placeholder=\"用户名\" disabled></el-input>\r\n        </el-form-item>\r\n\r\n        <!-- 姓名 -->\r\n        <el-form-item label=\"姓名\" prop=\"name\">\r\n          <el-input v-model=\"user.name\" placeholder=\"姓名\"></el-input>\r\n        </el-form-item>\r\n\r\n        <!-- 电话 -->\r\n        <el-form-item label=\"电话\" prop=\"phone\">\r\n          <el-input v-model=\"user.phone\" placeholder=\"电话\"></el-input>\r\n        </el-form-item>\r\n\r\n        <!-- 邮箱 -->\r\n        <el-form-item label=\"邮箱\" prop=\"email\">\r\n          <el-input v-model=\"user.email\" placeholder=\"邮箱\"></el-input>\r\n        </el-form-item>\r\n\r\n        <!-- 保存按钮 -->\r\n        <div style=\"text-align: center; margin-bottom: 20px\">\r\n          <el-button type=\"primary\" @click=\"update\">保 存</el-button>\r\n        </div>\r\n      </el-form>\r\n    </el-card>\r\n\r\n    <!-- 修改密码弹窗 -->\r\n    <el-dialog title=\"修改密码\" :visible.sync=\"dialogVisible\" width=\"30%\" :close-on-click-modal=\"false\" destroy-on-close>\r\n      <el-form :model=\"user\" label-width=\"80px\" style=\"padding-right: 20px\" :rules=\"rules\" ref=\"formRef\">\r\n        <!-- 原始密码 -->\r\n        <el-form-item label=\"原始密码\" prop=\"password\">\r\n          <el-input show-password v-model=\"user.password\" placeholder=\"原始密码\"></el-input>\r\n        </el-form-item>\r\n\r\n        <!-- 新密码 -->\r\n        <el-form-item label=\"新密码\" prop=\"newPassword\">\r\n          <el-input show-password v-model=\"user.newPassword\" placeholder=\"新密码\"></el-input>\r\n        </el-form-item>\r\n\r\n        <!-- 确认密码 -->\r\n        <el-form-item label=\"确认密码\" prop=\"confirmPassword\">\r\n          <el-input show-password v-model=\"user.confirmPassword\" placeholder=\"确认密码\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <!-- 弹窗底部操作按钮 -->\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"save\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    // 自定义密码验证规则\r\n    const validatePassword = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请确认密码'));  // 确认密码不能为空\r\n      } else if (value !== this.user.newPassword) {\r\n        callback(new Error('确认密码错误'));  // 确认密码需与新密码一致\r\n      } else {\r\n        callback(); // 验证通过\r\n      }\r\n    };\r\n\r\n    return {\r\n      // 当前用户信息，从 localStorage 加载\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n\r\n      // 控制修改密码弹窗的显示\r\n      dialogVisible: false,\r\n\r\n      // 表单验证规则\r\n      rules: {\r\n        password: [\r\n          { required: true, message: '请输入原始密码', trigger: 'blur' },\r\n        ],\r\n        newPassword: [\r\n          { required: true, message: '请输入新密码', trigger: 'blur' },\r\n        ],\r\n        confirmPassword: [\r\n          { validator: validatePassword, required: true, trigger: 'blur' },\r\n        ],\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    // 保存用户信息\r\n    update() {\r\n      this.$request.put('/admin/update', this.user).then(res => {\r\n        if (res.code === '200') {\r\n          this.$message.success('保存成功');  // 提示保存成功\r\n          localStorage.setItem('xm-user', JSON.stringify(this.user)); // 更新缓存\r\n          this.$emit('update:user');  // 通知父组件刷新用户信息\r\n        } else {\r\n          this.$message.error(res.msg);  // 显示错误信息\r\n        }\r\n      });\r\n    },\r\n\r\n    // 上传头像成功后更新用户头像\r\n    handleAvatarSuccess(response, file, fileList) {\r\n      this.$set(this.user, 'avatar', response.data);  // 更新头像地址\r\n    },\r\n\r\n    // 打开修改密码弹窗\r\n    updatePassword() {\r\n      this.dialogVisible = true;\r\n    },\r\n\r\n    // 提交修改密码表单\r\n    save() {\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          this.$request.put('/updatePassword', this.user).then(res => {\r\n            if (res.code === '200') {\r\n              this.$message.success('修改密码成功');  // 提示修改成功\r\n              this.$router.push('/login');  // 重定向到登录页面\r\n            } else {\r\n              this.$message.error(res.msg);  // 显示错误信息\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/deep/.el-form-item__label {\r\n  font-weight: bold;\r\n}\r\n/deep/.el-upload {\r\n  border-radius: 50%;\r\n}\r\n/deep/.avatar-uploader .el-upload {\r\n  border: 1px dashed #d9d9d9;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n  border-radius: 50%;\r\n}\r\n.avatar-uploader-icon {\r\n  font-size: 28px;\r\n  color: #8c939d;\r\n  width: 120px;\r\n  height: 120px;\r\n  line-height: 120px;\r\n  text-align: center;\r\n  border-radius: 50%;\r\n}\r\n.avatar {\r\n  width: 120px;\r\n  height: 120px;\r\n  display: block;\r\n  border-radius: 50%;\r\n}\r\n</style>\r\n"],"mappings":";AAoFA;EACAA,KAAA;IACA;IACA,MAAAC,gBAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA,UAAAG,IAAA,CAAAC,WAAA;QACAH,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IAEA;MACA;MACAE,IAAA,EAAAE,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MAEA;MACAC,aAAA;MAEA;MACAC,KAAA;QACAC,QAAA,GACA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAV,WAAA,GACA;UAAAQ,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAC,eAAA,GACA;UAAAC,SAAA,EAAAlB,gBAAA;UAAAc,QAAA;UAAAE,OAAA;QAAA;MAEA;IACA;EACA;EACAG,OAAA;IACA;IACAC,OAAA;MACA,KAAAC,QAAA,CAAAC,GAAA,uBAAAjB,IAAA,EAAAkB,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACAlB,YAAA,CAAAmB,OAAA,YAAArB,IAAA,CAAAsB,SAAA,MAAAxB,IAAA;UACA,KAAAyB,KAAA;QACA;UACA,KAAAJ,QAAA,CAAAK,KAAA,CAAAP,GAAA,CAAAQ,GAAA;QACA;MACA;IACA;IAEA;IACAC,oBAAAC,QAAA,EAAAC,IAAA,EAAAC,QAAA;MACA,KAAAC,IAAA,MAAAhC,IAAA,YAAA6B,QAAA,CAAAnC,IAAA;IACA;IAEA;IACAuC,eAAA;MACA,KAAA3B,aAAA;IACA;IAEA;IACA4B,KAAA;MACA,KAAAC,KAAA,CAAAC,OAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAtB,QAAA,CAAAC,GAAA,yBAAAjB,IAAA,EAAAkB,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAC,IAAA;cACA,KAAAC,QAAA,CAAAC,OAAA;cACA,KAAAiB,OAAA,CAAAC,IAAA;YACA;cACA,KAAAnB,QAAA,CAAAK,KAAA,CAAAP,GAAA,CAAAQ,GAAA;YACA;UACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}