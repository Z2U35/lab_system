{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport doSchedule from \"@/views/manager/DoSchedule.vue\";\nexport default {\n  name: \"DoSchedule\",\n  computed: {\n    doSchedule() {\n      return doSchedule;\n    }\n  },\n  data() {\n    return {\n      tableData: [],\n      // 所有的数据\n      pageNum: 1,\n      // 当前的页码\n      pageSize: 10,\n      // 每页显示的个数\n      total: 0,\n      name: null,\n      number: null,\n      fromVisible: false,\n      form: {},\n      isEditing: null,\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      curSemester: null,\n      rules: {\n        labId: [{\n          required: true,\n          message: '请选择实验室编号',\n          trigger: 'blur'\n        }]\n      },\n      ids: [],\n      freeLabs: [],\n      list: [],\n      headFilters: []\n    };\n  },\n  created() {\n    this.load(1);\n    this.getList();\n  },\n  methods: {\n    getList() {\n      this.$request.get('/schedule/selectAll').then(res => {\n        if (res.code === '200') {\n          this.list = res.data;\n          this.tableFilter(this.list);\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    tableFilter(list) {\n      // 传入表格数据\n      let filters = {};\n      if (list.length) {\n        Object.keys(list[0]).forEach(item => {\n          // 拿到第一条数据，将key值组成数组，并将key给filters对象作为键名，值为空数组\n          filters[item] = [];\n        });\n        list.forEach(item => {\n          // 遍历表格的数据数组\n          for (let key in item) {\n            // 遍历数据数组的每一项(对象)\n            if (filters.hasOwnProperty(key) && !filters[key].find(i => i.text == item[key])) {\n              // 如果filters对象中有当前键名（它的值是数组）,并且该数组中不含当前值的对象\n              filters[key].push({\n                text: item[key],\n                value: item[key]\n              }); // filters当前键名对应的值（数组），再push该值组成的对象（el-table筛选条件的格式）\n            }\n          }\n        });\n      }\n      this.headFilters = filters;\n    },\n    filterHandler(value, row, column) {\n      const property = column['property'];\n      return row[property] === value;\n    },\n    loadFreeLabs() {\n      this.$request({\n        url: '/schedule/selectFreeLabs/',\n        method: 'POST',\n        data: this.form\n      }).then(res => {\n        if (res.code === '200') {\n          // 表示成功保存\n          this.freeLabs = res.data;\n        } else {\n          this.$message.error(res.msg); // 弹出错误的信息\n        }\n      });\n    },\n    save() {\n      // 保存按钮触发的逻辑  它会触发新增或者更新\n      console.log(this.form);\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request({\n            url: '/schedule/doScheduled',\n            method: 'PUT',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // 表示成功保存\n              this.$message.success('操作成功');\n              this.load(1);\n              this.fromVisible = false;\n            } else {\n              this.$message.error(res.msg); // 弹出错误的信息\n            }\n          });\n        }\n      });\n    },\n    doScheduled(row) {\n      this.form = JSON.parse(JSON.stringify(row)); // 给form对象赋值  注意要深拷贝数据\n      this.loadFreeLabs(row);\n      this.fromVisible = true; // 打开弹窗\n    },\n    del(id) {\n      // 单个删除\n      this.$confirm('您确定删除吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/schedule/delete/' + id).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    handleSelectionChange(rows) {\n      // 当前选中的所有的行数据\n      this.ids = rows.map(v => v.id);\n    },\n    delBatch() {\n      // 批量删除\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据');\n        return;\n      }\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/schedule/delete/batch', {\n          data: this.ids\n        }).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    load(pageNum) {\n      // 分页查询\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/schedule/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          number: this.number\n        }\n      }).then(res => {\n        this.tableData = res.data?.list;\n        this.total = res.data?.total;\n      });\n    },\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    }\n  }\n};","map":{"version":3,"names":["doSchedule","name","computed","data","tableData","pageNum","pageSize","total","number","fromVisible","form","isEditing","user","JSON","parse","localStorage","getItem","curSemester","rules","labId","required","message","trigger","ids","freeLabs","list","headFilters","created","load","getList","methods","$request","get","then","res","code","tableFilter","$message","error","msg","filters","length","Object","keys","forEach","item","key","hasOwnProperty","find","i","text","push","value","filterHandler","row","column","property","loadFreeLabs","url","method","save","console","log","$refs","formRef","validate","valid","success","doScheduled","stringify","del","id","$confirm","type","response","delete","catch","handleSelectionChange","rows","map","v","delBatch","warning","params","handleCurrentChange"],"sources":["src/views/manager/DoSchedule.vue"],"sourcesContent":["<template>\r\n  <div>\r\n\r\n    <div class=\"table\">\r\n      <el-table :data=\"tableData\" strip @selection-change=\"handleSelectionChange\">\r\n        <el-table-column prop=\"id\" label=\"序号\" width=\"70\" align=\"center\" sortable></el-table-column>\r\n        <el-table-column prop=\"semesterName\" label=\"上课学期\" width=\"120\" sortable :filters=\"headFilters['semesterName']\"\r\n                         :filter-method=\"filterHandler\"></el-table-column>\r\n        <el-table-column prop=\"startWeek\" label=\"开始周\"></el-table-column>\r\n        <el-table-column prop=\"endWeek\" label=\"结束周\"></el-table-column>\r\n        <el-table-column prop=\"week\" label=\"星期\"></el-table-column>\r\n        <el-table-column prop=\"sessionName\" label=\"节次\"></el-table-column>\r\n        <el-table-column prop=\"courseName\" label=\"课程名\" width=\"130\"></el-table-column>\r\n        <el-table-column prop=\"clazz\" label=\"上课班级\" :filters=\"headFilters['clazz']\"\r\n                         :filter-method=\"filterHandler\"></el-table-column>\r\n        <el-table-column prop=\"number\" label=\"上课人数\"></el-table-column>\r\n        <el-table-column prop=\"labType\" label=\"实验室类型\"></el-table-column>\r\n        <el-table-column prop=\"teacherName\" label=\"申请教师\" :filters=\"headFilters['teacherName']\"\r\n                         :filter-method=\"filterHandler\"></el-table-column>\r\n        <el-table-column prop=\"status\" label=\"排课状态\" :filters=\"headFilters['status']\"\r\n                         :filter-method=\"filterHandler\"></el-table-column>\r\n        <el-table-column label=\"操作\" align=\"center\" width=\"90\">\r\n          <template v-slot=\"scope\">\r\n            <el-button v-if=\"scope.row.status === '未排课'\" size=\"mini\" type=\"primary\" plain @click=\"doScheduled(scope.row)\">排课</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <div class=\"pagination\">\r\n        <el-pagination\r\n            background\r\n            @current-change=\"handleCurrentChange\"\r\n            :current-page=\"pageNum\"\r\n            :page-sizes=\"[5, 10, 20]\"\r\n            :page-size=\"pageSize\"\r\n            layout=\"total, prev, pager, next\"\r\n            :total=\"total\">\r\n        </el-pagination>\r\n      </div>\r\n    </div>\r\n\r\n\r\n    <el-dialog title=\"实验室排课\" :visible.sync=\"fromVisible\" width=\"40%\" :close-on-click-modal=\"false\" destroy-on-close>\r\n      <el-form :model=\"form\" label-width=\"100px\" style=\"padding-right: 50px\" :rules=\"rules\" ref=\"formRef\">\r\n        <el-form-item label=\"实验室编号\" prop=\"labId\">\r\n          <el-select v-model=\"form.labId\" placeholder=\"请选择实验室编号\" style=\"width: 100%\">\r\n            <el-option  v-for=\"item in freeLabs\" :label=\"item.number\" :value=\"item.id\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"fromVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"save\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport doSchedule from \"@/views/manager/DoSchedule.vue\";\r\n\r\nexport default {\r\n  name: \"DoSchedule\",\r\n  computed: {\r\n    doSchedule() {\r\n      return doSchedule\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      tableData: [],  // 所有的数据\r\n      pageNum: 1,   // 当前的页码\r\n      pageSize: 10,  // 每页显示的个数\r\n      total: 0,\r\n      name: null,\r\n      number: null,\r\n      fromVisible: false,\r\n      form: {},\r\n      isEditing: null,\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      curSemester: null,\r\n      rules: {\r\n        labId: [\r\n          {required: true, message: '请选择实验室编号', trigger: 'blur'},\r\n        ],\r\n      },\r\n      ids: [],\r\n      freeLabs: [],\r\n      list: [],\r\n      headFilters: []\r\n    }\r\n  },\r\n  created() {\r\n    this.load(1)\r\n    this.getList()\r\n  },\r\n  methods: {\r\n    getList() {\r\n      this.$request.get('/schedule/selectAll').then(res => {\r\n        if (res.code === '200') {\r\n          this.list = res.data\r\n          this.tableFilter(this.list)\r\n        } else {\r\n          this.$message.error(res.msg)\r\n        }\r\n      })\r\n    },\r\n    tableFilter(list){ // 传入表格数据\r\n      let filters = {}\r\n      if (list.length) {\r\n        Object.keys(list[0]).forEach(item => { // 拿到第一条数据，将key值组成数组，并将key给filters对象作为键名，值为空数组\r\n          filters[item] = []\r\n        })\r\n        list.forEach(item => { // 遍历表格的数据数组\r\n          for (let key in item) { // 遍历数据数组的每一项(对象)\r\n            if (filters.hasOwnProperty(key) && !filters[key].find(i => i.text == item[key])) { // 如果filters对象中有当前键名（它的值是数组）,并且该数组中不含当前值的对象\r\n              filters[key].push({text: item[key], value: item[key]}) // filters当前键名对应的值（数组），再push该值组成的对象（el-table筛选条件的格式）\r\n            }\r\n          }\r\n        })\r\n      }\r\n      this.headFilters = filters\r\n    },\r\n    filterHandler(value, row, column) {\r\n      const property = column['property'];\r\n      return row[property] === value;\r\n    },\r\n    loadFreeLabs() {\r\n      this.$request({\r\n        url: '/schedule/selectFreeLabs/',\r\n        method: 'POST',\r\n        data: this.form\r\n      }).then(res => {\r\n        if (res.code === '200') {  // 表示成功保存\r\n          this.freeLabs = res.data\r\n        } else {\r\n          this.$message.error(res.msg)  // 弹出错误的信息\r\n        }\r\n      })\r\n    },\r\n    save() {   // 保存按钮触发的逻辑  它会触发新增或者更新\r\n      console.log(this.form)\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          this.$request({\r\n            url: '/schedule/doScheduled',\r\n            method: 'PUT',\r\n            data: this.form\r\n          }).then(res => {\r\n            if (res.code === '200') {  // 表示成功保存\r\n              this.$message.success('操作成功')\r\n              this.load(1)\r\n              this.fromVisible = false\r\n            } else {\r\n              this.$message.error(res.msg)  // 弹出错误的信息\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    doScheduled(row) {\r\n      this.form = JSON.parse(JSON.stringify(row))  // 给form对象赋值  注意要深拷贝数据\r\n      this.loadFreeLabs(row)\r\n      this.fromVisible = true   // 打开弹窗\r\n    },\r\n    del(id) {   // 单个删除\r\n      this.$confirm('您确定删除吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n        this.$request.delete('/schedule/delete/' + id).then(res => {\r\n          if (res.code === '200') {   // 表示操作成功\r\n            this.$message.success('操作成功')\r\n            this.load(1)\r\n          } else {\r\n            this.$message.error(res.msg)  // 弹出错误的信息\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    handleSelectionChange(rows) {   // 当前选中的所有的行数据\r\n      this.ids = rows.map(v => v.id)\r\n    },\r\n    delBatch() {   // 批量删除\r\n      if (!this.ids.length) {\r\n        this.$message.warning('请选择数据')\r\n        return\r\n      }\r\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n        this.$request.delete('/schedule/delete/batch', {data: this.ids}).then(res => {\r\n          if (res.code === '200') {   // 表示操作成功\r\n            this.$message.success('操作成功')\r\n            this.load(1)\r\n          } else {\r\n            this.$message.error(res.msg)  // 弹出错误的信息\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    load(pageNum) {  // 分页查询\r\n      if (pageNum) this.pageNum = pageNum\r\n      this.$request.get('/schedule/selectPage', {\r\n        params: {\r\n          pageNum: this.pageNum,\r\n          pageSize: this.pageSize,\r\n          number: this.number,\r\n        }\r\n      }).then(res => {\r\n        this.tableData = res.data?.list\r\n        this.total = res.data?.total\r\n      })\r\n    },\r\n    handleCurrentChange(pageNum) {\r\n      this.load(pageNum)\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}