{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from \"@/router\";\n\n// 创建一个新的 axios 实例\nconst request = axios.create({\n  baseURL: process.env.VUE_APP_BASEURL,\n  // 设置后端的基础接口地址，通常从环境变量中获取，http://localhost:9090\n  timeout: 30000 // 设置超时时间为 30 秒\n});\n\n// 请求拦截器\n// 作用：在请求发送到服务器之前进行一些统一的处理\nrequest.interceptors.request.use(config => {\n  // 设置请求头的内容类型为 JSON 格式\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n  // 从 localStorage 中获取缓存的用户信息\n  let user = JSON.parse(localStorage.getItem(\"xm-user\") || '{}');\n\n  // 如果用户已登录，设置 token 到请求头中\n  config.headers['token'] = user.token;\n\n  // 返回处理后的请求配置\n  return config;\n}, error => {\n  // 如果请求在发送前出现错误，打印错误日志并拒绝请求\n  console.error('request error: ' + error); // 用于调试\n  return Promise.reject(error); // 返回 Promise.reject 终止请求\n});\n\n// 响应拦截器\n// 作用：在服务器返回数据后，对响应数据进行统一处理\nrequest.interceptors.response.use(response => {\n  // 获取响应数据\n  let res = response.data;\n\n  // 兼容服务端返回的数据为字符串的情况，尝试将其解析为 JSON 格式\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n\n  // 如果服务端返回的状态码为 '401'（未授权或登录过期）\n  if (res.code === '401') {\n    router.push('/login'); // 跳转到登录页面\n  }\n\n  // 返回处理后的响应数据\n  return res;\n}, error => {\n  // 如果响应返回错误，打印错误日志\n  console.error('response error: ' + error); // 用于调试\n  return Promise.reject(error); // 返回 Promise.reject 以便调用方处理错误\n});\nexport default request; // 导出封装好的 axios 实例，供其他模块使用","map":{"version":3,"names":["axios","router","request","create","baseURL","process","env","VUE_APP_BASEURL","timeout","interceptors","use","config","headers","user","JSON","parse","localStorage","getItem","token","error","console","Promise","reject","response","res","data","code","push"],"sources":["C:/JavaProject/lab_management_system/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\"\r\n\r\n// 创建一个新的 axios 实例\r\nconst request = axios.create({\r\n    baseURL: process.env.VUE_APP_BASEURL,   // 设置后端的基础接口地址，通常从环境变量中获取，http://localhost:9090\r\n    timeout: 30000                          // 设置超时时间为 30 秒\r\n})\r\n\r\n// 请求拦截器\r\n// 作用：在请求发送到服务器之前进行一些统一的处理\r\nrequest.interceptors.request.use(config => {\r\n    // 设置请求头的内容类型为 JSON 格式\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n    // 从 localStorage 中获取缓存的用户信息\r\n    let user = JSON.parse(localStorage.getItem(\"xm-user\") || '{}');\r\n\r\n    // 如果用户已登录，设置 token 到请求头中\r\n    config.headers['token'] = user.token;\r\n\r\n    // 返回处理后的请求配置\r\n    return config;\r\n}, error => {\r\n    // 如果请求在发送前出现错误，打印错误日志并拒绝请求\r\n    console.error('request error: ' + error); // 用于调试\r\n    return Promise.reject(error); // 返回 Promise.reject 终止请求\r\n});\r\n\r\n// 响应拦截器\r\n// 作用：在服务器返回数据后，对响应数据进行统一处理\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        // 获取响应数据\r\n        let res = response.data;\r\n\r\n        // 兼容服务端返回的数据为字符串的情况，尝试将其解析为 JSON 格式\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res;\r\n        }\r\n\r\n        // 如果服务端返回的状态码为 '401'（未授权或登录过期）\r\n        if (res.code === '401') {\r\n            router.push('/login'); // 跳转到登录页面\r\n        }\r\n\r\n        // 返回处理后的响应数据\r\n        return res;\r\n    },\r\n    error => {\r\n        // 如果响应返回错误，打印错误日志\r\n        console.error('response error: ' + error); // 用于调试\r\n        return Promise.reject(error); // 返回 Promise.reject 以便调用方处理错误\r\n    }\r\n)\r\n\r\nexport default request; // 导出封装好的 axios 实例，供其他模块使用\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EACzBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,eAAe;EAAI;EACxCC,OAAO,EAAE,KAAK,CAA0B;AAC5C,CAAC,CAAC;;AAEF;AACA;AACAN,OAAO,CAACO,YAAY,CAACP,OAAO,CAACQ,GAAG,CAACC,MAAM,IAAI;EACvC;EACAA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;;EAEjE;EACA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;;EAE9D;EACAN,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,IAAI,CAACK,KAAK;;EAEpC;EACA,OAAOP,MAAM;AACjB,CAAC,EAAEQ,KAAK,IAAI;EACR;EACAC,OAAO,CAACD,KAAK,CAAC,iBAAiB,GAAGA,KAAK,CAAC,CAAC,CAAC;EAC1C,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC;;AAEF;AACA;AACAjB,OAAO,CAACO,YAAY,CAACc,QAAQ,CAACb,GAAG,CAC7Ba,QAAQ,IAAI;EACR;EACA,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEvB;EACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGV,IAAI,CAACC,KAAK,CAACS,GAAG,CAAC,GAAGA,GAAG;EACrC;;EAEA;EACA,IAAIA,GAAG,CAACE,IAAI,KAAK,KAAK,EAAE;IACpBzB,MAAM,CAAC0B,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EAC3B;;EAEA;EACA,OAAOH,GAAG;AACd,CAAC,EACDL,KAAK,IAAI;EACL;EACAC,OAAO,CAACD,KAAK,CAAC,kBAAkB,GAAGA,KAAK,CAAC,CAAC,CAAC;EAC3C,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC,CAAC;AAClC,CACJ,CAAC;AAED,eAAejB,OAAO,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}